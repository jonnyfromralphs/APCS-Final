package GameState;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import ImageManager.ImageFile;

public class PlayState extends GameState
{
	
		//gamesettings
		public static int round = 1;
		public static int counter = 0;
		private int speed = 5;
		
		//images
		private ImageFile[] speedUps;
		private static ImageFile flash;
		private static ImageFile reverseFlash;
		
		//position dont need?
		private static int flashXPos = 5;
		private static int flashYPos = 220;
		private static int revFlashXPos = 300;
		private static int revFlashYPos = 5;


		public PlayState( GameStateManager gsm)
		{
			this.gsm = gsm;
			speedUps = new ImageFile[3];
			try
			{
				for(int i = 0; i < speedUps.length; i++)
				{
					speedUps[i] = new ImageFile("/Sprites/speedUp.png", Math.random() * 300, Math.random() * 220);	
				}
				flash = new ImageFile("/Sprites/flash.png", flashXPos, flashYPos);
				flash = new ImageFile("/Sprites/reverseflash.png", revFlashXPos, revFlashYPos);
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
			
		}
		
		public void draw(Graphics2D g)
		{
			//sets background
			g.setColor(Color.BLACK);
			g.fillRect(0, 0, 320, 240);
			//flash
//			g.setColor(Color.RED);
//			g.fillRect(flashXPos, flashYPos, 10, 15);
			flash.draw(g);
			//reverse flash
//			g.setColor(Color.YELLOW);
//			g.fillRect(revFlashXPos, revFlashYPos, 10, 15);
			reverseFlash.draw(g);
			//if intersects game over
			if(new Rectangle( (int) flash.getPosX(), (int) flash.getPosY(),10,15).intersects(new Rectangle( (int) reverseFlash.getPosX(), (int) reverseFlash.getPosY(),10,15)))
			{
				gsm.setState(2);
			}
			//draws speeedUp power ups
			for(int i = 0; i < speedUps.length; i++)
			{
				if(speedUps[i].isVisible())
				{
					speedUps[i].draw(g);
				}
			}
			//draws hud
			g.setColor(Color.WHITE);
			g.drawString("Round " + round, 277, 232);
			g.drawString("Lightning: " + counter, 5, 15);
			
		}
		
		
		public static void setRound(int r)
		{
			round = r;
		}
		
		public static void setPosition(int x1,int y1,int x2,int y2)
		{
			flash.setPosX(x1);
			flash.setPosY(y1);
			reverseFlash.setPosX(x1);
			reverseFlash.setPosY(y1);
		}
		
		public void update()
		{
				if(reverseFlash.getPosX() > flash.getPosX())
				{
					revFlashXPos--;
					
				}
				else if(reverseFlash.getPosX() < flash.getPosX())
				{
					revFlashXPos++;
					
				}
				else if(reverseFlash.getPosY() > flash.getPosY())
				{
					revFlashYPos--;
					
				}
				else
				{
					revFlashYPos++;
					
				}
				
				//if flash gets speedup
				for(int i = 0; i < speedUps.length; i++)
				{
					if(new Rectangle((int) flash.getPosX(),(int) flash.getPosY(),10,15).intersects(new Rectangle( (int) speedUps[i].getPosX(), (int) speedUps[i].getPosY(), 10, 15)))
					{
						speedUps[i].setVisible();
					}
				}
			}
		
		
		
		@Override
		public void keyPressed(int key) 
		{
			if(key == KeyEvent.VK_RIGHT)
			{
				moveRight();
			}
			if(key == KeyEvent.VK_LEFT)
			{
				moveLeft();
			}
			if(key == KeyEvent.VK_UP)
			{
				moveUp();
			}
			if(key == KeyEvent.VK_DOWN)
			{
				moveDown();
			}
		}
			

		public void moveRight()
		{
			if(flash.getPosX() >= 305)
			{
				flash.setPosX(305);
			}
			else
			{
				 flash.setPosX(flash.getPosX() + speed);
			}
		}
		
		public void moveLeft()
		{
			if(flash.getPosX() < 20)
			{
				flash.setPosX(5);
			}
			else
			{
				 flash.setPosX(flash.getPosX() - speed);
			}
		}
		
		public void moveUp()
		{
			if(flash.getPosY() < 20)
			{
				flash.setPosY(5);
			}
			else
			{
				flash.setPosY(flash.getPosY() - speed);
			}
		}
		
		public void moveDown()
		{
			if(flash.getPosY() >= 220)
			{
				flash.setPosY(220);
			}
			else
			{
				flash.setPosY(flash.getPosY() + speed);
			}
		}

		@Override
		public void init()
		{
			
		}

		@Override
		public void keyReleased(int key) 
		{
			
		}

}
